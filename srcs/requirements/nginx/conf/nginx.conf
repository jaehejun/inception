user www-data;
worker_processes auto;

error_log /var/log/nginx/error.log warn;

pid /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    server {
        listen 443 ssl;

        # server_name jaehejun.42.fr;

        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
        ssl_protocols TLSv1.3;

        root   /var/www/html;
        index  index.php index.html index.htm;
        
        location / {
            try_files $uri $uri/ /index.php?$args;
        }
        
        location ~ \.php$ {
            fastcgi_pass wordpress:9000;
            include fastcgi.conf;
            include fastcgi_params;
			# fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    	}
    }
}

# server {

# # The server listens for incoming connections on port 443, which is the default port for HTTPS traffic. The server listens for both IPv4 and IPv6 connections
# 	listen 443 ssl;
# 	listen [::]:443 ssl;

# # replace login with your own loggin
#     server_name jaehejun.42.fr;

# # The ssl_certificate and ssl_certificate_key directives specify the locations of the SSL/TLS certificate and private key, respectively, that will be used to encrypt the traffic. The ssl_protocols directive specifies the TLS protocols that the server should support.
# 	# ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
# 	# ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
# 	ssl_certificate /etc/nginx/ssl/nginx.crt;
# 	ssl_certificate_key /etc/nginx/ssl/nginx.key;


# # We are using version 1.3 of TLS
# 	ssl_protocols TLSv1.3;

# # The index directive specifies the default file that should be served when a client requests a directory on the server. The root directive specifies the root directory that should be used to search for files.
# 	index index.php index.html index.htm;
# 	root /var/www/html;

# # The location directive defines a block of configuration that applies to a specific location, which is specified using a regular expression. In this case, the regular expression ~ [^/]\\.php(/|$) matches any request that ends in .php and is not preceded by a / character.

# 	location ~ [^/]\\.php(/|$) {

# # The try_files directive attempts to serve the requested file, and if it does not exist, it will return a 404 error.
#         try_files $uri =404;

# #The fastcgi_pass directive passes the request to a FastCGI server for processing.
#         fastcgi_pass wordpress:9000;

# 	# The include directive includes a file with FastCGI parameters.
#         include fastcgi_params;

# #The fastcgi_param directive sets a FastCGI parameter. The SCRIPT_FILENAME parameter specifies the path to the PHP script that should be executed.
#         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
#     }

# 	location ~ \.php$ {
# 		include fastcgi.conf;
# 		include fastcgi_params;
# 		fastcgi_pass wordpress:9000;
# 	}

# }